// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0

package repository

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.cleanUpVerificationsStmt, err = db.PrepareContext(ctx, cleanUpVerifications); err != nil {
		return nil, fmt.Errorf("error preparing query CleanUpVerifications: %w", err)
	}
	if q.deleteUserByIDStmt, err = db.PrepareContext(ctx, deleteUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserByID: %w", err)
	}
	if q.findUserByEmailStmt, err = db.PrepareContext(ctx, findUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query FindUserByEmail: %w", err)
	}
	if q.findUserByIDStmt, err = db.PrepareContext(ctx, findUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query FindUserByID: %w", err)
	}
	if q.findVerificationByIDStmt, err = db.PrepareContext(ctx, findVerificationByID); err != nil {
		return nil, fmt.Errorf("error preparing query FindVerificationByID: %w", err)
	}
	if q.storeOrUpdateUserStmt, err = db.PrepareContext(ctx, storeOrUpdateUser); err != nil {
		return nil, fmt.Errorf("error preparing query StoreOrUpdateUser: %w", err)
	}
	if q.storeOrUpdateVerificationStmt, err = db.PrepareContext(ctx, storeOrUpdateVerification); err != nil {
		return nil, fmt.Errorf("error preparing query StoreOrUpdateVerification: %w", err)
	}
	if q.updateUserEmailByIDStmt, err = db.PrepareContext(ctx, updateUserEmailByID); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserEmailByID: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.cleanUpVerificationsStmt != nil {
		if cerr := q.cleanUpVerificationsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing cleanUpVerificationsStmt: %w", cerr)
		}
	}
	if q.deleteUserByIDStmt != nil {
		if cerr := q.deleteUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserByIDStmt: %w", cerr)
		}
	}
	if q.findUserByEmailStmt != nil {
		if cerr := q.findUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findUserByEmailStmt: %w", cerr)
		}
	}
	if q.findUserByIDStmt != nil {
		if cerr := q.findUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findUserByIDStmt: %w", cerr)
		}
	}
	if q.findVerificationByIDStmt != nil {
		if cerr := q.findVerificationByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findVerificationByIDStmt: %w", cerr)
		}
	}
	if q.storeOrUpdateUserStmt != nil {
		if cerr := q.storeOrUpdateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing storeOrUpdateUserStmt: %w", cerr)
		}
	}
	if q.storeOrUpdateVerificationStmt != nil {
		if cerr := q.storeOrUpdateVerificationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing storeOrUpdateVerificationStmt: %w", cerr)
		}
	}
	if q.updateUserEmailByIDStmt != nil {
		if cerr := q.updateUserEmailByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserEmailByIDStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                            DBTX
	tx                            *sql.Tx
	cleanUpVerificationsStmt      *sql.Stmt
	deleteUserByIDStmt            *sql.Stmt
	findUserByEmailStmt           *sql.Stmt
	findUserByIDStmt              *sql.Stmt
	findVerificationByIDStmt      *sql.Stmt
	storeOrUpdateUserStmt         *sql.Stmt
	storeOrUpdateVerificationStmt *sql.Stmt
	updateUserEmailByIDStmt       *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                            tx,
		tx:                            tx,
		cleanUpVerificationsStmt:      q.cleanUpVerificationsStmt,
		deleteUserByIDStmt:            q.deleteUserByIDStmt,
		findUserByEmailStmt:           q.findUserByEmailStmt,
		findUserByIDStmt:              q.findUserByIDStmt,
		findVerificationByIDStmt:      q.findVerificationByIDStmt,
		storeOrUpdateUserStmt:         q.storeOrUpdateUserStmt,
		storeOrUpdateVerificationStmt: q.storeOrUpdateVerificationStmt,
		updateUserEmailByIDStmt:       q.updateUserEmailByIDStmt,
	}
}
